{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","isImgUrlValid","isImdbUrlValid","setIsImgUrlValid","setIsImdbUrlValid","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasInvalidValue","hasError","htmlFor","classNames","type","placeholder","event","undefined","currentTarget","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","pattern","isReadyToSubmit","onSubmit","preventDefault","test","prevCount","disabled","App","moviesFromServer","setMovies","newMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d172910.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label: string,\n  isImgUrlValid?: boolean,\n  isImdbUrlValid?: boolean,\n  required?: boolean,\n  onChange: (newValue: string) => void,\n  setIsImgUrlValid?: (newValue: boolean) => void,\n  setIsImdbUrlValid?: (newValue: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  isImgUrlValid,\n  isImdbUrlValid,\n  setIsImgUrlValid,\n  setIsImdbUrlValid,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n\n  const hasInvalidValue = (isImgUrlValid === false)\n    || (isImdbUrlValid === false);\n  const hasError = (touched && required && !value) || hasInvalidValue;\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    if (setIsImgUrlValid !== undefined) {\n      setIsImgUrlValid(true);\n    }\n\n    if (setIsImdbUrlValid !== undefined) {\n      setIsImdbUrlValid(true);\n    }\n\n    onChange(event.currentTarget.value);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={handleChange}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">\n          {\n            hasInvalidValue\n              ? 'Invalid URL!'\n              : `${label} is required`\n          }\n        </p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { FC, FormEvent, useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void\n};\n\nexport const NewMovie: FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [isImgUrlValid, setIsImgUrlValid] = useState(true);\n  const [isImdbUrlValid, setIsImdbUrlValid] = useState(true);\n\n  // eslint-disable-next-line\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!pattern.test(imgUrl) || !pattern.test(imdbUrl)) {\n      setIsImgUrlValid(pattern.test(imgUrl));\n      setIsImdbUrlValid(pattern.test(imdbUrl));\n\n      return;\n    }\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const isReadyToSubmit = title && imgUrl && imdbUrl && imdbUrl && imdbId;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(value) => {\n          setTitle(value);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(value) => {\n          setDescription(value);\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(value) => {\n          setImgUrl(value);\n        }}\n        isImgUrlValid={isImgUrlValid}\n        setIsImgUrlValid={setIsImgUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(value) => {\n          setImdbUrl(value);\n        }}\n        isImdbUrlValid={isImdbUrlValid}\n        setIsImdbUrlValid={setIsImdbUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(value) => {\n          setImdbId(value);\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isReadyToSubmit}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { FC, useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App:FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies(prevMovies => [...prevMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}